{"ast":null,"code":"import { GET, POST_LOGIN, POST, UPDATE, DELETE } from './api';\n\nconst login = async data => {\n  const request = await POST_LOGIN('users/login/', {\n    email: data.email,\n    password: data.password\n  });\n  return request.data;\n};\n\nconst profile = () => {\n  const user_local = JSON.parse(localStorage.getItem('user') || null);\n  const request = GET(`users/${user_local.username}/`);\n  return request;\n}; //Tasks\n\n\nconst get_total_tasks = async () => {\n  const total = await GET('actions/');\n  const actives = await GET(`actions/?is_active=true`);\n  const priority = await GET(`actions/?is_priority=true`);\n  const completes = await GET(`actions/?is_complete=true`);\n  return {\n    total: total,\n    actives: actives,\n    priority: priority,\n    completes: completes\n  };\n};\n\nconst get_tasks = async (page, filters = {\n  is_active: null,\n  is_complete: null,\n  is_priority: null\n}, date_range = {\n  start_date: '',\n  end_date: ''\n}, year = '', month = '', day = '', person = '', enterprises = '') => {\n  let string_date_rage = '';\n\n  if (date_range.start_date) {\n    string_date_rage = `${date_range.start_date},${date_range.end_date}`;\n  } else {\n    string_date_rage = '';\n  }\n\n  const request = await GET(`actions/?page=${page}&is_active=${filters.is_active}&is_complete=${filters.is_complete}&is_priority=${filters.is_priority}&date__date__range=${string_date_rage}&date__year=${year}&date__month=${month}&date__day=${day}&employee=${person}&client=${enterprises}`);\n  return request;\n};\n\nconst finish_task = async id_task => {\n  const request = await POST(`actions/${id_task}/finish/`);\n  return request;\n};\n\nconst update_task = async (id_task, data) => {\n  const request = await UPDATE(`actions/${id_task}/`, data);\n  return request;\n};\n\nconst delete_task = async id_task => {\n  const request = await DELETE(`actions/${id_task}/`);\n  return request;\n};\n\nconst create_task = async data => {\n  const task = await POST('actions/', data);\n  return task;\n}; //Enterprises\n\n\nconst get_total_enterprises = async () => {\n  const enterprises = await GET(`clients/`);\n  const enterprises_actives = await GET(`clients/?is_active=true`);\n  const enterprises_inactives = await GET(`clients/?is_active=false`);\n  return {\n    enterprises: enterprises,\n    enterprises_actives: enterprises_actives,\n    enterprises_inactives: enterprises_inactives\n  };\n};\n\nconst get_enterprises = async page => {\n  const enterprises = await GET(`clients/?page=${page}&is_active=true`);\n  return enterprises;\n};\n\nconst get_retrive_enterprise = async id_enterprise => {\n  const enterprise = await GET(`clients/${id_enterprise}/`);\n  return enterprise;\n};\n\nconst create_enterprise = async data => {\n  const enterprise = await POST('clients/', data);\n  return enterprise;\n};\n\nconst delete_enterprise = async id_enterprise => {\n  const enterprise = await DELETE(`clients/${id_enterprise}/`);\n  return enterprise;\n};\n\nconst update_enterprise = async (id_enterprise, data) => {\n  const enterprise = await UPDATE(`clients/${id_enterprise}/`, data);\n  return enterprise;\n};\n\nconst search_enterprise = async (name_enterprise, page) => {\n  const search = await GET(`clients/?is_active=true&name__contains=${name_enterprise}`);\n  return search;\n}; //Employess\n\n\nconst get_employess = async (page, is_active, enterprise) => {\n  if (!enterprise) {\n    enterprise = '';\n  }\n\n  const employess = await GET(`employess/?page=${page}&is_active=${is_active}&enterprise=${enterprise}`);\n  return employess;\n};\n\nconst get_totals_employees = async () => {\n  const enterprises = await GET(`employess/`);\n  const enterprises_actives = await GET(`employess/?is_active=true`);\n  const enterprises_inactives = await GET(`employess/?is_active=false`);\n  return {\n    employess: enterprises.data,\n    employess_actives: enterprises_actives.data,\n    employess_inactives: enterprises_inactives.data\n  };\n};\n\nconst delete_employee = async id_employee => {\n  const employee = await DELETE(`employess/${id_employee}/`);\n  return employee;\n};\n\nconst update_employee = async (id_employee, data) => {\n  const employee = await UPDATE(`employess/${id_employee}/`, data);\n  return employee;\n};\n\nconst create_employee = async data => {\n  const employee = await POST(\"employess/\", data);\n  return employee;\n};\n\nconst search_employee = async (name_employee, page) => {\n  const search = await GET(`employess/?is_active=true&name__contains=${name_employee}`);\n  console.log(search);\n  return search;\n}; //Type Actions\n\n\nconst get_type_actions = async page => {\n  const type_tasks = await GET(`type_actions/?page=${page}`);\n  return type_tasks;\n};\n\nconst create_type_task = async data => {\n  const type_task = await POST('type_actions/', data);\n  return type_task;\n};\n\nconst delete_type_task = async id_task => {\n  const delete_type_task = await DELETE(`type_actions/${id_task}/`);\n  return delete_type_task;\n};\n\nconst update_type_task = async (id_task, data) => {\n  const update_type_task = await UPDATE(`type_actions/${id_task}/`, data);\n  return update_type_task;\n};\n\nconst search_type_task = async name_type_task => {\n  const search = await GET(`type_actions/?description__contains=${name_type_task}`);\n  return search;\n};\n\nconst api = {\n  user: {\n    login,\n    profile\n  },\n  tasks: {\n    get_total_tasks,\n    get_tasks,\n    finish_task,\n    update_task,\n    delete_task,\n    create_task\n  },\n  enterprises: {\n    get_total_enterprises,\n    get_enterprises,\n    get_retrive_enterprise,\n    create_enterprise,\n    delete_enterprise,\n    update_enterprise,\n    search_enterprise\n  },\n  employess: {\n    get_totals_employees,\n    get_employess,\n    delete_employee,\n    update_employee,\n    create_employee,\n    search_employee\n  },\n  type_tasks: {\n    get_type_actions,\n    create_type_task,\n    delete_type_task,\n    update_type_task,\n    search_type_task\n  }\n};\nexport default api;","map":{"version":3,"sources":["/Users/felipebarraza/Desktop/ui_crm/src/api/endpoints.js"],"names":["GET","POST_LOGIN","POST","UPDATE","DELETE","login","data","request","email","password","profile","user_local","JSON","parse","localStorage","getItem","username","get_total_tasks","total","actives","priority","completes","get_tasks","page","filters","is_active","is_complete","is_priority","date_range","start_date","end_date","year","month","day","person","enterprises","string_date_rage","finish_task","id_task","update_task","delete_task","create_task","task","get_total_enterprises","enterprises_actives","enterprises_inactives","get_enterprises","get_retrive_enterprise","id_enterprise","enterprise","create_enterprise","delete_enterprise","update_enterprise","search_enterprise","name_enterprise","search","get_employess","employess","get_totals_employees","employess_actives","employess_inactives","delete_employee","id_employee","employee","update_employee","create_employee","search_employee","name_employee","console","log","get_type_actions","type_tasks","create_type_task","type_task","delete_type_task","update_type_task","search_type_task","name_type_task","api","user","tasks"],"mappings":"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","sourcesContent":["import { GET, POST_LOGIN, POST, UPDATE, DELETE } from './api'\n\nconst login = async (data) => {\n\n    const request = await POST_LOGIN('users/login/', {\n        email: data.email,\n        password: data.password\n    })\n\n    return request.data\n}\n\nconst profile = () =>{\n\n    const user_local = JSON.parse(localStorage.getItem('user') || null)\n    const request = GET(`users/${user_local.username}/`)\n\n    return request\n\n}\n\n//Tasks\nconst get_total_tasks = async() =>{\n\n    const total = await GET('actions/')\n    const actives = await GET(`actions/?is_active=true`)\n    const priority = await GET(`actions/?is_priority=true`)\n    const completes = await GET(`actions/?is_complete=true`)\n\n    return {\n        total: total,\n        actives: actives,\n        priority: priority,\n        completes: completes\n    }\n}\n\nconst get_tasks = async (\n        page, \n        filters= {is_active:null, is_complete: null, is_priority: null},\n        date_range= {start_date:'', end_date:''},\n        year='',\n        month='',\n        day='',\n        person='',\n        enterprises=''\n        ) =>{\n            \n        let string_date_rage = ''\n        \n        if(date_range.start_date){\n            string_date_rage = `${date_range.start_date},${date_range.end_date}`\n        }else{\n            string_date_rage=''\n        }\n        \n\n    const request = await GET(\n        `actions/?page=${page}&is_active=${filters.is_active}&is_complete=${filters.is_complete}&is_priority=${filters.is_priority}&date__date__range=${string_date_rage}&date__year=${year}&date__month=${month}&date__day=${day}&employee=${person}&client=${enterprises}`\n        )\n\n    return request\n}\n\nconst finish_task = async (id_task) =>{\n\n    const request = await POST(`actions/${id_task}/finish/`)\n\n    return request\n}\n\nconst update_task = async(id_task ,data) =>{\n    \n    const request = await UPDATE(`actions/${id_task}/`, data)    \n    \n    return request\n}\n\nconst delete_task = async (id_task) =>{\n\n    const request = await DELETE(`actions/${id_task}/`)\n\n    return request\n\n}\n\nconst create_task = async (data) =>{\n    \n    const task = await POST('actions/', data)    \n\n    return task\n\n}\n\n//Enterprises\n\nconst get_total_enterprises = async() =>{\n\n    const enterprises = await GET(`clients/`)\n    const enterprises_actives = await GET(`clients/?is_active=true`)\n    const enterprises_inactives = await GET(`clients/?is_active=false`)\n\n    return {\n        enterprises: enterprises,\n        enterprises_actives: enterprises_actives,\n        enterprises_inactives: enterprises_inactives\n    }\n}\n\nconst get_enterprises = async(page) =>{\n    \n    const enterprises = await GET(`clients/?page=${page}&is_active=true`)    \n\n    return enterprises\n}\n\nconst get_retrive_enterprise = async(id_enterprise) =>{\n    \n    const enterprise = await GET(`clients/${id_enterprise}/`)\n    \n    return enterprise\n}\n\nconst create_enterprise = async(data) =>{\n\n    const enterprise = await POST('clients/', data)\n\n    return enterprise\n}\n\nconst delete_enterprise = async(id_enterprise) =>{\n\n    const enterprise = await DELETE(`clients/${id_enterprise}/`)\n\n    return enterprise\n\n}\n\nconst update_enterprise = async(id_enterprise, data) => {\n\n    const enterprise = await UPDATE(`clients/${id_enterprise}/`, data)\n\n    return enterprise\n}\n\nconst search_enterprise = async(name_enterprise, page)=>{\n    \n    const search = await GET(`clients/?is_active=true&name__contains=${name_enterprise}`)\n\n    return search\n\n}\n\n//Employess\nconst get_employess = async(page, is_active, enterprise) =>{\n    if(!enterprise){\n        enterprise=''\n    }\n    const employess = await GET(`employess/?page=${page}&is_active=${is_active}&enterprise=${enterprise}`)        \n    return employess\n}\n\nconst get_totals_employees = async() =>{\n    const enterprises = await GET(`employess/`)\n    const enterprises_actives = await GET(`employess/?is_active=true`)\n    const enterprises_inactives = await GET(`employess/?is_active=false`)\n\n    return {\n        employess: enterprises.data,\n        employess_actives: enterprises_actives.data,\n        employess_inactives: enterprises_inactives.data\n    }\n}\n\nconst delete_employee = async(id_employee) => {\n\n    const employee = await DELETE(`employess/${id_employee}/`)\n\n    return employee\n}\n\nconst update_employee=async(id_employee, data) =>{\n   \n    const employee = await UPDATE(`employess/${id_employee}/`, data)\n\n    return employee\n}\n\nconst create_employee = async(data)=>{\n    \n    const employee = await POST(\"employess/\", data)\n\n    return employee\n}\n\nconst search_employee = async(name_employee, page)=>{\n    \n    const search = await GET(`employess/?is_active=true&name__contains=${name_employee}`)\n    console.log(search)\n\n    return search\n\n}\n\n//Type Actions\nconst get_type_actions = async(page) =>{\n    \n    const type_tasks = await GET(`type_actions/?page=${page}`)\n\n    return type_tasks\n}\n\nconst create_type_task = async(data)=>{\n\n    const type_task = await POST('type_actions/', data)\n\n    return type_task\n\n}\n\nconst delete_type_task = async(id_task)=>{\n\n    const delete_type_task = await DELETE(`type_actions/${id_task}/`)\n\n    return delete_type_task\n\n}\n\nconst update_type_task = async(id_task, data)=>{\n\n    const update_type_task = await UPDATE(`type_actions/${id_task}/`, data)\n\n    return update_type_task\n}\n\nconst search_type_task = async(name_type_task)=>{\n    \n    const search = await GET(`type_actions/?description__contains=${name_type_task}`)\n\n    return search\n}\n\nconst api = {\n    user:{\n        login,\n        profile\n    },\n    tasks:{\n        get_total_tasks,\n        get_tasks,\n        finish_task,\n        update_task,\n        delete_task,\n        create_task        \n    },\n    enterprises:{\n        get_total_enterprises,\n        get_enterprises,\n        get_retrive_enterprise,\n        create_enterprise,\n        delete_enterprise,\n        update_enterprise,\n        search_enterprise\n    },\n    employess:{\n        get_totals_employees,\n        get_employess,\n        delete_employee,\n        update_employee,\n        create_employee,\n        search_employee\n    },\n    type_tasks:{\n        get_type_actions,\n        create_type_task,\n        delete_type_task,\n        update_type_task,\n        search_type_task\n    }\n    \n\n}\n\nexport default  api"]},"metadata":{},"sourceType":"module"}