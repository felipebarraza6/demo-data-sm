{"ast":null,"code":"var _jsxFileName = \"/Users/felipebarraza/Desktop/ui_crm/src/components/tasks/FormTypeTasks.js\";\nimport React, { useState, useReducer } from 'react';\nimport { Form, Button, Modal, Input, Tooltip, Typography, Table } from 'antd';\nimport { ApiTwoTone, EditOutlined, DeleteOutlined } from '@ant-design/icons'; //Reducer\n\nimport { reducer } from '../../reducers/tasks'; //Actions\n\nimport { getTypeTasks, postTypeTasks, deleteTypeTask, updateTypeTask } from '../../actions/tasks';\nconst {\n  Text\n} = Typography;\n\nconst FormTypeTasks = () => {\n  const [form] = Form.useForm();\n  const [modalForm, setModalForm] = useState({\n    visible: false\n  });\n  const initialState = {\n    loading: false,\n    loading_form: false,\n    data: null,\n    countTypes: 0,\n    values: null,\n    page: 1\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const columns = [{\n    title: 'ID',\n    dataIndex: 'id',\n    key: 'id'\n  }, {\n    title: 'DescripciÃ³n',\n    dataIndex: 'description',\n    key: 'description'\n  }, {\n    render: type_task => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Editar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"link\",\n      onClick: () => {\n        updateTypeTask(dispatch, type_task, state);\n      },\n      style: {\n        marginRight: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(EditOutlined, {\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }))), /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Eliminar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"link\",\n      onClick: () => deleteTypeTask(dispatch, type_task, state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(DeleteOutlined, {\n      style: {\n        fontSize: '20px',\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }))))\n  }];\n\n  const onFinish = data => {\n    postTypeTasks(dispatch, data);\n\n    if (postTypeTasks) {\n      form.resetFields();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    visible: modalForm.visible,\n    title: \"Tipos de tareas\",\n    cancelButtonProps: {\n      style: {\n        display: 'none'\n      }\n    },\n    okButtonProps: {\n      style: {\n        display: 'none'\n      }\n    },\n    onCancel: () => setModalForm({ ...modalForm,\n      visible: false\n    }),\n    width: '700px',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"inline\",\n    name: \"form_typetask\",\n    style: {\n      marginBottom: '20px'\n    },\n    initialValues: state.values,\n    onFinish: onFinish,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    style: {\n      width: '82%',\n      marginBottom: '10px'\n    },\n    name: \"description\",\n    rules: [{\n      required: true,\n      message: 'Escribe el nuevo tipo de tarea'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Descripci\\xF3n\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, \"Guardar\")), /*#__PURE__*/React.createElement(Table, {\n    title: () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, {\n      strong: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 36\n      }\n    }, \"TIPOS DE TAREAS (\", state.countTypes, \")\")),\n    columns: columns,\n    dataSource: state.data,\n    rowKey: \"id\",\n    loading: state.loading,\n    bordered: true,\n    pagination: {\n      total: state.countTypes,\n      simple: true,\n      onChange: page => getTypeTasks(dispatch, page)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Tipos de tareas\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: () => {\n      setModalForm({ ...modalForm,\n        visible: true\n      });\n      getTypeTasks(dispatch, 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ApiTwoTone, {\n    style: {\n      fontSize: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default FormTypeTasks;","map":{"version":3,"sources":["/Users/felipebarraza/Desktop/ui_crm/src/components/tasks/FormTypeTasks.js"],"names":["React","useState","useReducer","Form","Button","Modal","Input","Tooltip","Typography","Table","ApiTwoTone","EditOutlined","DeleteOutlined","reducer","getTypeTasks","postTypeTasks","deleteTypeTask","updateTypeTask","Text","FormTypeTasks","form","useForm","modalForm","setModalForm","visible","initialState","loading","loading_form","data","countTypes","values","page","state","dispatch","columns","title","dataIndex","key","render","type_task","marginRight","fontSize","color","onFinish","resetFields","style","display","marginBottom","width","required","message","total","simple","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from 'react'\n\nimport { Form, Button, Modal, Input, Tooltip, Typography, Table } from 'antd'\n\nimport {  ApiTwoTone, EditOutlined, DeleteOutlined } from '@ant-design/icons'\n\n//Reducer\n\nimport {reducer } from '../../reducers/tasks'\n\n//Actions\nimport { getTypeTasks, postTypeTasks, deleteTypeTask, updateTypeTask } from '../../actions/tasks'\n\nconst { Text } = Typography\n\nconst FormTypeTasks = ()=>{\n\n    const [form] = Form.useForm()\n\n    const [modalForm, setModalForm] = useState({\n        visible: false\n    })\n\n    const initialState = {\n        loading: false,\n        loading_form: false,\n        data:null,\n        countTypes:0,\n        values: null,\n        page: 1\n\n    }\n\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id'\n        },\n        {\n            title: 'DescripciÃ³n',\n            dataIndex: 'description',\n            key: 'description'\n        },\n        {\n            render: (type_task)=><>\n                <Tooltip title=\"Editar\">\n                    <Button \n                        type=\"link\"\n                        onClick={()=> {\n                            updateTypeTask(dispatch, type_task, state)\n                            \n                        }\n\n                        }\n                        style={{marginRight: '5px'}}\n                        >\n                        <EditOutlined style={{fontSize:'20px'}} />\n                    </Button>\n                </Tooltip>\n                <Tooltip title=\"Eliminar\">\n                    <Button\n                        type=\"link\"\n                        onClick={()=> deleteTypeTask(dispatch, type_task, state)}\n                        >\n                        <DeleteOutlined style={{fontSize:'20px', color:'red'}} />\n                    </Button>\n                </Tooltip>\n                </>\n            \n        }\n    ]\n\n    \n\n\n    const onFinish = (data) =>{\n        \n        postTypeTasks(dispatch, data)\n\n        if(postTypeTasks){\n            form.resetFields();\n        }\n    }\n\n\n    return (\n        <React.Fragment>\n           \n            <Modal\n                visible={modalForm.visible}\n                title=\"Tipos de tareas\"\n                cancelButtonProps={{ style: { display: 'none' } }}\n                okButtonProps={{ style: { display: 'none' } }}\n                onCancel={()=> setModalForm({...modalForm, visible:false})}\n                width={'700px'}                \n\n            >\n                <Form\n                    form={form}\n                    layout=\"inline\"\n                    name=\"form_typetask\"\n                    style={{marginBottom:'20px'}}\n                    initialValues={state.values}\n                    onFinish = {onFinish}\n\n                >\n                    <Form.Item\n                        style={{width:'82%', marginBottom:'10px'}}\n                        name=\"description\"\n                        rules={[\n                            {\n                              required: true,\n                              message: 'Escribe el nuevo tipo de tarea',\n                            },\n                          ]}                        \n                    >\n                        <Input placeholder=\"DescripciÃ³n\"/>\n                    </Form.Item>\n                   \n\n                    <Button type=\"primary\" htmlType=\"submit\" >Guardar</Button>\n\n                </Form>\n                \n\n                <Table\n                    title={() => <><Text strong>TIPOS DE TAREAS ({state.countTypes})</Text></>}\n                    columns={columns}\n                    dataSource={state.data}\n                    rowKey='id'\n                    loading = {state.loading}\n                    bordered\n                    pagination={{                        \n                        total:state.countTypes,\n                        simple:true,\n                        onChange: (page) => getTypeTasks(dispatch, page)\n                    }}\n                >\n\n                </Table>\n\n            </Modal>\n\n            <Tooltip  title=\"Tipos de tareas\">\n                <Button                     \n                    type=\"link\" \n                    onClick={\n                        () => {setModalForm({\n                                ...modalForm, \n                                visible:true\n                                })                                                                \n\n                                getTypeTasks(dispatch, 1)\n                            }}>\n                    <ApiTwoTone style={{fontSize:'30px'}} />\n                </Button>\n            </Tooltip>\n            \n            \n\n        </React.Fragment>\n    )\n\n}\n\nexport default FormTypeTasks"]},"metadata":{},"sourceType":"module"}