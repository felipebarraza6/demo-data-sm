{"ast":null,"code":"var _jsxFileName = \"/Users/felipebarraza/Desktop/ui_crm/src/actions/tasks_dashboard.js\";\nimport api from '../api/endpoints';\nimport React from 'react';\nimport { notification, Modal } from 'antd';\nimport { SmileOutlined, WarningOutlined, DeleteOutlined } from '@ant-design/icons';\nexport const getTotals = async dispatch => {\n  try {\n    dispatch({\n      type: 'DASHBOARD_LOADING'\n    });\n    const tasks = await api.tasks.get_total_tasks();\n    dispatch({\n      type: 'GET_TOTALS',\n      payload: tasks\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ERROR',\n      error: error\n    });\n  }\n};\nexport const getTotalTasks = async dispatch => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: 1\n  });\n\n  try {\n    dispatch({\n      type: 'FALSE_ALL_FILTER'\n    });\n    const tasks = await api.tasks.get_tasks(1);\n    dispatch({\n      type: 'GET_DATA',\n      payload: tasks,\n      page: 1\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ERROR',\n      payload: error\n    });\n  }\n};\nexport const getActiveTasks = async (dispatch, state) => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: state.page\n  });\n\n  try {\n    dispatch({\n      type: 'ACTIVE_FILTER'\n    });\n    const tasks = await api.tasks.get_tasks(1, {\n      is_active: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: tasks,\n      page: 1\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ERROR',\n      payload: error\n    });\n  }\n};\nexport const getPriorityTasks = async (dispatch, state) => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: state.page\n  });\n\n  try {\n    dispatch({\n      type: 'PRIORITY_FILTER'\n    });\n    const tasks = await api.tasks.get_tasks(1, {\n      is_priority: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: tasks,\n      page: 1\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ERROR',\n      payload: error\n    });\n  }\n};\nexport const getCompleteTasks = async (dispatch, state) => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: state.page\n  });\n  dispatch({\n    type: 'COMPLETE_FILTER'\n  });\n\n  try {\n    const tasks = await api.tasks.get_tasks(1, {\n      is_complete: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: tasks,\n      page: 1\n    });\n  } catch (error) {\n    dispatch({\n      type: 'ERROR',\n      payload: error\n    });\n  }\n};\nexport const getPagination = async (dispatch, state, page) => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: page\n  });\n\n  if (state.filters.is_active) {\n    const tasks = await api.tasks.get_tasks(page, {\n      is_active: true\n    });\n    dispatch({\n      type: 'PAGINATION',\n      payload: tasks,\n      page: page\n    });\n  } else if (state.filters.is_priority) {\n    const tasks = await api.tasks.get_tasks(page, {\n      is_prirority: true\n    });\n    dispatch({\n      type: 'PAGINATION',\n      payload: tasks,\n      page: page\n    });\n  } else if (state.filters.is_complete) {\n    const tasks = await api.tasks.get_tasks(page, {\n      is_complete: true\n    });\n    dispatch({\n      type: 'PAGINATION',\n      payload: tasks,\n      page: page\n    });\n  } else {\n    const tasks = await api.tasks.get_tasks(page);\n    dispatch({\n      type: 'PAGINATION',\n      payload: tasks,\n      page: page\n    });\n  }\n};\nexport const updateTasks = async (dispatch, state) => {\n  dispatch({\n    type: 'TABLE_LOADING',\n    page: state.page\n  });\n  const totals = await api.tasks.get_total_tasks();\n  dispatch({\n    type: 'UPDATE_TOTALS',\n    payload: totals\n  });\n\n  if (state.filters.is_active) {\n    const data = await api.tasks.get_tasks(state.page, {\n      is_active: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: data,\n      page: state.page\n    });\n  } else if (state.filters.is_priority) {\n    const data = await api.tasks.get_tasks(state.page, {\n      is_priority: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: data,\n      page: state.page\n    });\n  } else if (state.filters.is_complete) {\n    const data = await api.tasks.get_tasks(state.page, {\n      is_complete: true\n    });\n    dispatch({\n      type: 'GET_DATA',\n      payload: data,\n      page: state.page\n    });\n  } else {\n    const data = await api.tasks.get_tasks(state.page);\n    dispatch({\n      type: 'GET_DATA',\n      payload: data,\n      page: state.page\n    });\n  }\n};\nexport const finishTask = (dispatch, id_task, state) => {\n  Modal.confirm({\n    title: 'Precaución',\n    icon: /*#__PURE__*/React.createElement(WarningOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrás re abrirla, editarla o eliminarla.`,\n    okText: 'COMPLETAR',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.tasks.finish_task(id_task);\n\n      if (data.status) {\n        notification.open({\n          message: `Tarea Completada!`,\n          description: `La tarea #${id_task} fue completada`,\n          icon: /*#__PURE__*/React.createElement(SmileOutlined, {\n            style: {\n              color: '#108ee9'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 31\n            }\n          })\n        });\n        updateTasks(dispatch, state);\n      }\n    }\n  });\n};\nexport const finishTaskModal = (id_task, update) => {\n  Modal.confirm({\n    title: 'Precaución',\n    icon: /*#__PURE__*/React.createElement(WarningOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrás re abrirla, editarla o eliminarla.`,\n    okText: 'COMPLETAR',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.tasks.finish_task(id_task);\n\n      if (data.status) {\n        notification.open({\n          message: `Tarea Completada!`,\n          description: `La tarea #${id_task} fue completada`,\n          icon: /*#__PURE__*/React.createElement(SmileOutlined, {\n            style: {\n              color: '#108ee9'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 31\n            }\n          })\n        });\n        update();\n        Modal.destroyAll();\n      }\n    }\n  });\n};\nexport const updateTask = async (dispatch, id_task, data, state) => {\n  const request = await api.tasks.update_task(id_task, data);\n  updateTasks(dispatch, state);\n  return request;\n};\nexport const deleteTask = (dispatch, id_task, state) => {\n  Modal.confirm({\n    title: `Eliminar tarea #${id_task}`,\n    icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de liminar la tarea #${id_task}, una vez eliminada no podrás recuperar este registro`,\n    okText: 'ELIMINAR',\n    okType: 'danger',\n    cancelType: 'danger',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.tasks.delete_task(id_task);\n\n      if (data.status) {\n        notification.open({\n          message: `Tarea Eliminada!`,\n          description: `La tarea #${id_task} fue eliminada`,\n          icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n            style: {\n              color: '#red'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 31\n            }\n          })\n        });\n        updateTasks(dispatch, state);\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/Users/felipebarraza/Desktop/ui_crm/src/actions/tasks_dashboard.js"],"names":["api","React","notification","Modal","SmileOutlined","WarningOutlined","DeleteOutlined","getTotals","dispatch","type","tasks","get_total_tasks","payload","error","getTotalTasks","page","get_tasks","getActiveTasks","state","is_active","getPriorityTasks","is_priority","getCompleteTasks","is_complete","getPagination","filters","is_prirority","updateTasks","totals","data","finishTask","id_task","confirm","title","icon","content","okText","width","onOk","finish_task","status","open","message","description","color","finishTaskModal","update","destroyAll","updateTask","request","update_task","deleteTask","okType","cancelType","delete_task"],"mappings":"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","sourcesContent":["\nimport api from '../api/endpoints'\n\nimport React from 'react'\n\nimport { notification, Modal } from 'antd'\nimport { SmileOutlined, WarningOutlined, DeleteOutlined } from '@ant-design/icons';\n\n\nexport const getTotals = async(dispatch) =>{\n    try{\n\n        dispatch({type: 'DASHBOARD_LOADING'})\n\n        const tasks = await api.tasks.get_total_tasks()\n        \n        dispatch({\n            type: 'GET_TOTALS',\n            payload: tasks\n        })\n\n    }catch(error){\n        dispatch({\n            type: 'ERROR',\n            error:error\n        })\n    }\n}\n\nexport const getTotalTasks= async(dispatch)=>{    \n    \n    dispatch({type: 'TABLE_LOADING', page: 1})\n    \n    try{\n        dispatch({type: 'FALSE_ALL_FILTER'})\n        \n        const tasks = await api.tasks.get_tasks(1)\n        \n        dispatch({\n            type: 'GET_DATA',\n            payload: tasks,\n            page: 1\n        })\n\n        }catch(error){\n            \n            dispatch({\n                type: 'ERROR',\n                payload: error\n            })\n\n        }\n\n}\n\nexport const getActiveTasks = async(dispatch, state) =>{\n    dispatch({type: 'TABLE_LOADING', page: state.page})\n        try{\n            dispatch({type: 'ACTIVE_FILTER'})\n            const tasks = await api.tasks.get_tasks(1, {is_active:true})\n\n            dispatch({\n                type: 'GET_DATA',\n                payload: tasks,\n                page: 1\n            })\n\n        }catch(error){\n            dispatch({\n                type: 'ERROR',\n                payload: error\n            })\n        }\n}\n\nexport const getPriorityTasks = async(dispatch, state) =>{\n    dispatch({type: 'TABLE_LOADING', page: state.page})\n\n        try{\n            dispatch({type: 'PRIORITY_FILTER'})\n            const tasks = await api.tasks.get_tasks(1, {is_priority:true})\n            dispatch({\n                type: 'GET_DATA',\n                payload: tasks,\n                page: 1\n            })\n\n        }catch(error){\n            dispatch({\n                type: 'ERROR',\n                payload: error\n            })\n        }\n}\n\nexport const getCompleteTasks = async(dispatch, state) =>{\n    dispatch({type: 'TABLE_LOADING', page: state.page})\n        dispatch({type: 'COMPLETE_FILTER'})\n        try{\n\n            const tasks = await api.tasks.get_tasks(1, {is_complete:true})\n            dispatch({\n                type: 'GET_DATA',\n                payload: tasks,\n                page: 1\n            })\n\n        }catch(error){\n            dispatch({\n                type: 'ERROR',\n                payload: error\n            })\n        }\n}\n\nexport const getPagination = async(dispatch, state, page) =>{\n    dispatch({\n        type:'TABLE_LOADING', page: page\n    })\n\n    if(state.filters.is_active){\n        const tasks = await api.tasks.get_tasks(page, {is_active:true})\n        dispatch({\n            type: 'PAGINATION',\n            payload: tasks,\n            page: page\n        })\n    } else\n    if(state.filters.is_priority){\n        const tasks = await api.tasks.get_tasks(page, {is_prirority:true})\n        dispatch({\n            type: 'PAGINATION',\n            payload: tasks,\n            page: page\n        })\n    } else\n    if(state.filters.is_complete){\n        const tasks = await api.tasks.get_tasks(page, {is_complete: true})\n        dispatch({\n            type: 'PAGINATION',\n            payload: tasks,\n            page: page\n        })\n    }else{\n        const tasks = await api.tasks.get_tasks(page)\n        dispatch({\n            type: 'PAGINATION',\n            payload: tasks,\n            page: page\n        })\n    }\n}\n\nexport const updateTasks = async(dispatch, state) =>{\n    dispatch({\n        type:'TABLE_LOADING',\n        page: state.page\n    })\n    const totals = await api.tasks.get_total_tasks()\n    \n    dispatch({\n        type: 'UPDATE_TOTALS',\n        payload: totals\n    }) \n\n    if(state.filters.is_active){\n       const data = await api.tasks.get_tasks(state.page, {is_active: true})\n       dispatch({\n        type: 'GET_DATA',\n        payload: data,\n        page: state.page\n    })\n\n    }else if(state.filters.is_priority){\n\n        const data = await api.tasks.get_tasks(state.page, {is_priority: true})\n        dispatch({\n            type: 'GET_DATA',\n            payload: data,\n            page: state.page\n        })\n\n    }else if(state.filters.is_complete){            \n        const data = await api.tasks.get_tasks(state.page, {is_complete: true})\n        dispatch({\n            type: 'GET_DATA',\n            payload: data,\n            page: state.page\n        })\n\n    }else{            \n        const data = await api.tasks.get_tasks(state.page)            \n        dispatch({\n            type: 'GET_DATA',\n            payload: data,\n            page: state.page\n        })\n\n    }\n}\n\nexport const finishTask = (dispatch, id_task, state) =>{\n    \n    Modal.confirm({\n        title:'Precaución',\n        icon: <WarningOutlined/>,\n        content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrás re abrirla, editarla o eliminarla.`,\n        okText: 'COMPLETAR',\n        width: '600px',\n        onOk: async() =>{\n                const data = await api.tasks.finish_task(id_task)\n                if(data.status){\n                    notification.open({\n                        message: `Tarea Completada!`,\n                        description: `La tarea #${id_task} fue completada`,\n                        icon: <SmileOutlined style={{ color: '#108ee9'}} />\n                    })\n                    updateTasks(dispatch, state)        \n                            \n                }\n        }         \n    })\n} \n\nexport const finishTaskModal = (id_task, update) =>{\n    Modal.confirm({\n        title:'Precaución',\n        icon: <WarningOutlined/>,\n        content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrás re abrirla, editarla o eliminarla.`,\n        okText: 'COMPLETAR',\n        width: '600px',\n        onOk: async() =>{\n                const data = await api.tasks.finish_task(id_task)\n                if(data.status){\n                    notification.open({\n                        message: `Tarea Completada!`,\n                        description: `La tarea #${id_task} fue completada`,\n                        icon: <SmileOutlined style={{ color: '#108ee9'}} />\n                    })\n                    update()\n                    Modal.destroyAll()\n                }\n        }         \n    })\n}\n\nexport const updateTask = async (dispatch, id_task, data, state) =>{\n    \n    const request = await api.tasks.update_task(id_task, data)    \n\n    updateTasks(dispatch, state)\n\n    return request\n}\n\nexport const deleteTask = (dispatch, id_task, state) => {\n    Modal.confirm({\n        title:`Eliminar tarea #${id_task}`,\n        icon: <DeleteOutlined style={{ color: 'red'}}/>,\n        content: `Estas seguro de liminar la tarea #${id_task}, una vez eliminada no podrás recuperar este registro`,\n        okText: 'ELIMINAR',\n        okType: 'danger',\n        cancelType: 'danger',\n        width: '600px',\n        onOk: async() =>{\n                const data = await api.tasks.delete_task(id_task)\n                if(data.status){\n                    notification.open({\n                        message: `Tarea Eliminada!`,\n                        description: `La tarea #${id_task} fue eliminada`,\n                        icon: <DeleteOutlined style={{ color: '#red'}} />\n                    })\n                    updateTasks(dispatch, state)            \n                }\n        }         \n    })\n\n}"]},"metadata":{},"sourceType":"module"}