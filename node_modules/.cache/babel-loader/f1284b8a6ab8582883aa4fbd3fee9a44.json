{"ast":null,"code":"var _jsxFileName = \"/Users/felipebarraza/Desktop/ui_crm/src/actions/tasks.js\";\nimport api from '../api/endpoints';\nimport React from 'react';\nimport moment from 'moment';\nimport { Modal, notification, Descriptions, Tag, Form, Input, Button, DatePicker } from 'antd';\nimport { DeleteOutlined, WarningOutlined, SmileOutlined, CheckCircleFilled, BookFilled, CheckCircleTwoTone, MinusCircleTwoTone, ApiTwoTone } from '@ant-design/icons';\nconst {\n  TextArea\n} = Input;\nexport const reloadTasks = async (dispatch, pages = {\n  totals: 1,\n  actives: 1,\n  priorities: 1,\n  completes: 1\n}, date_range = {\n  start_date: '',\n  end_date: ''\n}, year = '', month = '', day = '', id_person = '', id_enterprise = '') => {\n  try {\n    const totals = await api.tasks.get_tasks(pages.totals, '', {\n      start_date: date_range.start_date,\n      end_date: date_range.end_date\n    }, year, month, day, id_person, id_enterprise);\n    const actives = await api.tasks.get_tasks(pages.actives, {\n      is_active: true\n    }, {\n      start_date: date_range.start_date,\n      end_date: date_range.end_date\n    }, year, month, day, id_person, id_enterprise);\n    const priorities = await api.tasks.get_tasks(pages.priorities, {\n      is_priority: true\n    }, {\n      start_date: date_range.start_date,\n      end_date: date_range.end_date\n    }, year, month, day, id_person, id_enterprise);\n    const completes = await api.tasks.get_tasks(pages.completes, {\n      is_complete: true\n    }, {\n      start_date: date_range.start_date,\n      end_date: date_range.end_date\n    }, year, month, day, id_person, id_enterprise);\n    dispatch({\n      type: 'CLEAN_RANGE_DATE'\n    });\n    dispatch({\n      type: 'RELOAD_ALL_DATA',\n      payload: {\n        totals: totals,\n        actives: actives,\n        priority: priorities,\n        completes: completes,\n        date_range: date_range,\n        year: year,\n        month: month,\n        day: day,\n        id_enterprise_selected: id_enterprise,\n        id_person_selected: id_person\n      }\n    });\n  } catch (error) {\n    console.log({\n      error\n    });\n  }\n};\nexport const updateTaskModal = async (dispatch, task, state) => {\n  if (task) {\n    task = { ...task,\n      'date': moment(task.date)\n    };\n  }\n\n  const onFinish = async value => {\n    if (value.date) {\n      value = { ...value,\n        'date': moment(value.date).format('YYYY-MM-DDTHH:mm:ss')\n      };\n    }\n\n    const update_task = await api.tasks.update_task(task.id, value);\n\n    if (update_task.status) {\n      notification.open({\n        message: `Tarea Actualizada!`,\n        description: `La tarea \"${task.id}\" fue actualizada`,\n        icon: /*#__PURE__*/React.createElement(BookFilled, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 27\n          }\n        })\n      });\n      reloadTasks(dispatch, {\n        totals: state.pageTotals,\n        actives: state.pageActives,\n        priorities: state.pagePriority,\n        completes: state.pageCompletes\n      }, {\n        start_date: state.date_range.start_date,\n        end_date: state.date_range.end_date\n      }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n      Modal.destroyAll();\n    }\n  };\n\n  try {\n    Modal.info({\n      title: `Actualizar la tarea \"${task.id}\"`,\n      width: '400px',\n      maskClosable: true,\n      content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n        layout: \"vertical\",\n        name: \"update_types\",\n        style: {\n          marginTop: '20px'\n        },\n        onFinish: onFinish,\n        initialValues: task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        style: {\n          width: '100%',\n          marginBottom: '10px'\n        },\n        name: \"note\",\n        label: \"Nota\",\n        rules: [{\n          required: true,\n          message: 'Escribe una Nota'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TextArea, {\n        placeholder: \"Nota...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        name: \"date\",\n        label: \"Fecha de ejecuci\\xF3n\",\n        rules: [{\n          required: true,\n          message: 'Selecciona una fecha'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(DatePicker, {\n        style: {\n          width: '100%'\n        },\n        showTime: {\n          format: 'HH:mm:ss'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        style: {\n          marginRight: '5px'\n        },\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 22\n        }\n      }, \"Actualizar\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"danger\",\n        onClick: () => {\n          Modal.destroyAll();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 22\n        }\n      }, \"Cancelar\"))),\n      okButtonProps: {\n        style: {\n          display: 'none'\n        }\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const paginationTotals = async (dispatch, page, state) => {\n  console.log(state);\n\n  try {\n    dispatch({\n      type: 'LOADING_TOTALS'\n    });\n    const tasks_totals = await api.tasks.get_tasks(page, '', {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n    dispatch({\n      type: 'PAGINATION_TOTALS',\n      payload: tasks_totals,\n      page: page\n    });\n  } catch (error) {\n    console.log({\n      error\n    });\n  }\n};\nexport const paginationActives = async (dispatch, page, state) => {\n  try {\n    dispatch({\n      type: 'LOADING_ACTIVES'\n    });\n    const tasks_actives = await api.tasks.get_tasks(page, {\n      is_active: true\n    }, {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n    dispatch({\n      type: 'PAGINATION_ACTIVES',\n      payload: tasks_actives,\n      page: page\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const paginationPriorities = async (dispatch, page, state) => {\n  try {\n    dispatch({\n      type: 'LOADING_PRIORITIES'\n    });\n    const tasks_priorities = await api.tasks.get_tasks(page, {\n      is_priority: true\n    }, {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n    dispatch({\n      type: 'PAGINATION_PRIORITIES',\n      payload: tasks_priorities,\n      page: page\n    });\n  } catch (error) {\n    const tasks_priorities = await api.tasks.get_tasks(1, {\n      is_priority: true\n    }, {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day);\n    dispatch({\n      type: 'PAGINATION_PRIORITIES',\n      payload: tasks_priorities,\n      page: 1\n    });\n  }\n};\nexport const paginationCompletes = async (dispatch, page, state) => {\n  try {\n    dispatch({\n      type: 'LOADING_COMPLETES'\n    });\n    const tasks_completes = await api.tasks.get_tasks(page, {\n      is_complete: true\n    }, {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n    dispatch({\n      type: 'PAGINATION_COMPLETES',\n      payload: tasks_completes,\n      page: page\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteTask = (id_task, state, dispatch) => {\n  Modal.confirm({\n    title: `Eliminar tarea #${id_task}`,\n    icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de liminar la tarea #${id_task}, una vez eliminada no podrÃ¡s recuperar este registro`,\n    okText: 'ELIMINAR',\n    okType: 'danger',\n    cancelType: 'danger',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.tasks.delete_task(id_task);\n\n      if (data.status) {\n        notification.open({\n          message: `Tarea Eliminada!`,\n          description: `La tarea #${id_task} fue eliminada`,\n          icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n            style: {\n              color: '#red'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 31\n            }\n          })\n        });\n      }\n\n      reloadTasks(dispatch, {\n        totals: state.pageTotals,\n        actives: state.pageActives,\n        priorities: state.pagePriority,\n        completes: state.pageCompletes\n      }, {\n        start_date: state.date_range.start_date,\n        end_date: state.date_range.end_date\n      }, state.year, state.month, state.day);\n    }\n  });\n};\nexport const finishTask = (dispatch, id_task, state) => {\n  Modal.confirm({\n    title: 'PrecauciÃ³n',\n    icon: /*#__PURE__*/React.createElement(WarningOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrÃ¡s re abrirla, editarla o eliminarla.`,\n    okText: 'COMPLETAR',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.tasks.finish_task(id_task);\n\n      if (data.status) {\n        notification.open({\n          message: `Tarea Completada!`,\n          description: `La tarea #${id_task} fue completada`,\n          icon: /*#__PURE__*/React.createElement(SmileOutlined, {\n            style: {\n              color: '#108ee9'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 31\n            }\n          })\n        });\n        reloadTasks(dispatch, {\n          totals: state.pageTotals,\n          actives: state.pageActives,\n          priorities: state.pagePriority,\n          completes: state.pageCompletes\n        }, {\n          start_date: state.date_range.start_date,\n          end_date: state.date_range.end_date\n        }, state.year, state.month, state.day);\n      }\n    }\n  });\n};\nexport const updateTaks = async (id_task, dispatch, state, data) => {\n  try {\n    const task = await api.tasks.update_task(id_task, data);\n\n    if (task.status) {\n      notification.open({\n        message: 'Tarea Actualizada!',\n        description: `La tarea #${id_task} fue actualizada`,\n        icon: /*#__PURE__*/React.createElement(CheckCircleFilled, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    reloadTasks(dispatch, {\n      totals: state.pageTotals,\n      actives: state.pageActives,\n      priorities: state.pagePriority,\n      completes: state.pageCompletes\n    }, {\n      start_date: state.date_range.start_date,\n      end_date: state.date_range.end_date\n    }, state.year, state.month, state.day, state.id_person_selected, state.id_enterprise_selected);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const viewTask = task => {\n  Modal.info({\n    title: /*#__PURE__*/React.createElement(React.Fragment, null, task.type_action, \" | \", task.employee.name, \"(\", task.employee.enterprise, \")\"),\n    icon: /*#__PURE__*/React.createElement(BookFilled, {\n      style: {\n        color: '#1890ff'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 15\n      }\n    }),\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Descriptions, {\n      title: `Tarea #${task.id} - ${task.user}`,\n      layout: \"vertical\",\n      bordered: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Tipo de tarea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }\n    }, task.type_action), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Fecha de creaci\\xF3n\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tag, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }\n    }, task.created.slice(0, 10)), /*#__PURE__*/React.createElement(Tag, {\n      color: \"blue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 21\n      }\n    }, task.created.slice(11, 19), \" hrs\")), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Fecha de ejecuci\\xF3n\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tag, {\n      color: \"magenta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 17\n      }\n    }, task.date.slice(0, 10)), /*#__PURE__*/React.createElement(Tag, {\n      color: \"magenta\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }, task.date.slice(11, 19), \" hrs\")), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Nota\",\n      span: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }\n    }, task.note), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      style: {\n        textAlign: 'center'\n      },\n      label: \"ACTIVA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }\n    }, task.is_active ? /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n      twoToneColor: \"#87d068\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 39\n      }\n    }) : /*#__PURE__*/React.createElement(MinusCircleTwoTone, {\n      twoToneColor: \"red\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      style: {\n        textAlign: 'center'\n      },\n      label: \"PRIORIDAD\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 17\n      }\n    }, task.is_priority ? /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n      twoToneColor: \"#87d068\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(MinusCircleTwoTone, {\n      twoToneColor: \"red\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 114\n      }\n    })), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      style: {\n        textAlign: 'center'\n      },\n      label: \"COMLPETADA\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }\n    }, task.is_complete ? /*#__PURE__*/React.createElement(CheckCircleTwoTone, {\n      twoToneColor: \"#87d068\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(MinusCircleTwoTone, {\n      twoToneColor: \"red\",\n      style: {\n        fontSize: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 114\n      }\n    }))), /*#__PURE__*/React.createElement(Descriptions, {\n      title: `${task.employee.name}`,\n      bordered: true,\n      style: {\n        marginTop: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Empresa\",\n      span: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }\n    }, task.employee.enterprise), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Cargo\",\n      span: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }\n    }, task.employee.charge), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Email\",\n      span: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 17\n      }\n    }, task.employee.email), /*#__PURE__*/React.createElement(Descriptions.Item, {\n      label: \"Telefono\",\n      span: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 17\n      }\n    }, task.employee.phone_number))),\n    okText: 'OK',\n    width: '900px'\n  });\n};\nexport const getTypeTasks = async (dispatch, page) => {\n  try {\n    dispatch({\n      type: 'LOADING_TYPES'\n    });\n    const type_tasks = await api.type_tasks.get_type_actions(page);\n    dispatch({\n      type: 'GET_TYPE_TASKS',\n      payload: type_tasks,\n      page: page\n    });\n  } catch (error) {\n    console.log({\n      error\n    });\n  }\n};\nexport const postTypeTasks = async (dispatch, data) => {\n  try {\n    const type_task = await api.type_tasks.create_type_task(data);\n\n    if (type_task.status) {\n      getTypeTasks(dispatch, 1);\n    }\n  } catch (error) {\n    console.log({\n      error\n    });\n  }\n};\nexport const deleteTypeTask = async (dispatch, id_type, state) => {\n  console.log(state);\n  Modal.confirm({\n    title: `Eliminar tipo de tarea \"${id_type.description}\"`,\n    icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 15\n      }\n    }),\n    content: `Estas seguro de eliminar el tipo de tarea #${id_type.id}, una vez eliminada no podrÃ¡s recuperar este registro`,\n    okText: 'ELIMINAR',\n    okType: 'danger',\n    cancelType: 'danger',\n    width: '600px',\n    onOk: async () => {\n      const data = await api.type_tasks.delete_type_task(id_type.id);\n\n      if (data.status) {\n        notification.open({\n          message: `Tipo de tarea Eliminada!`,\n          description: `El tipo de tarea ${id_type.description} fue eliminada`,\n          icon: /*#__PURE__*/React.createElement(DeleteOutlined, {\n            style: {\n              color: '#red'\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 31\n            }\n          })\n        });\n      }\n\n      getTypeTasks(dispatch, state.page);\n    }\n  });\n};\nexport const updateTypeTask = async (dispatch, type_task, state) => {\n  const onFinish = async value => {\n    const update_task = await api.type_tasks.update_type_task(value.id, value);\n\n    if (update_task.status) {\n      notification.open({\n        message: `Tipo de tarea Actualizada!`,\n        description: `El tipo de tarea \"${value.description}\" fue actualizada`,\n        icon: /*#__PURE__*/React.createElement(ApiTwoTone, {\n          style: {\n            color: '#red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 27\n          }\n        })\n      });\n      getTypeTasks(dispatch, state.page);\n      Modal.destroyAll();\n    }\n  };\n\n  try {\n    Modal.info({\n      title: `Actualizar \"${type_task.description}\"`,\n      width: '700px',\n      maskClosable: true,\n      content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Form, {\n        layout: \"inline\",\n        name: \"update_types\",\n        style: {\n          marginTop: '20px'\n        },\n        onFinish: onFinish,\n        initialValues: type_task,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        style: {\n          width: '60%',\n          marginBottom: '10px'\n        },\n        name: \"id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        hidden: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        style: {\n          width: '60%',\n          marginBottom: '10px'\n        },\n        name: \"description\",\n        rules: [{\n          required: true,\n          message: 'Escribe el nuevo tipo de tarea'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        placeholder: \"Descripci\\xF3n\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 25\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        style: {\n          marginRight: '5px'\n        },\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 22\n        }\n      }, \"Actualizar\"), /*#__PURE__*/React.createElement(Button, {\n        type: \"danger\",\n        onClick: () => {\n          Modal.destroyAll();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 22\n        }\n      }, \"Cancelar\"))),\n      okButtonProps: {\n        style: {\n          display: 'none'\n        }\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/felipebarraza/Desktop/ui_crm/src/actions/tasks.js"],"names":["api","React","moment","Modal","notification","Descriptions","Tag","Form","Input","Button","DatePicker","DeleteOutlined","WarningOutlined","SmileOutlined","CheckCircleFilled","BookFilled","CheckCircleTwoTone","MinusCircleTwoTone","ApiTwoTone","TextArea","reloadTasks","dispatch","pages","totals","actives","priorities","completes","date_range","start_date","end_date","year","month","day","id_person","id_enterprise","tasks","get_tasks","is_active","is_priority","is_complete","type","payload","priority","id_enterprise_selected","id_person_selected","error","console","log","updateTaskModal","task","state","date","onFinish","value","format","update_task","id","status","open","message","description","icon","pageTotals","pageActives","pagePriority","pageCompletes","destroyAll","info","title","width","maskClosable","content","marginTop","marginBottom","required","marginRight","okButtonProps","style","display","paginationTotals","page","tasks_totals","paginationActives","tasks_actives","paginationPriorities","tasks_priorities","paginationCompletes","tasks_completes","deleteTask","id_task","confirm","color","okText","okType","cancelType","onOk","data","delete_task","finishTask","finish_task","updateTaks","viewTask","type_action","employee","name","enterprise","user","created","slice","note","textAlign","fontSize","charge","email","phone_number","getTypeTasks","type_tasks","get_type_actions","postTypeTasks","type_task","create_type_task","deleteTypeTask","id_type","delete_type_task","updateTypeTask","update_type_task"],"mappings":"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","sourcesContent":["\nimport api from '../api/endpoints'\n\nimport React from 'react'\n\nimport moment from 'moment'\n\nimport { Modal, notification, Descriptions, Tag, Form, Input, Button, DatePicker} from 'antd'\n\nimport { DeleteOutlined, WarningOutlined, SmileOutlined,\n        CheckCircleFilled, BookFilled, CheckCircleTwoTone, \n        MinusCircleTwoTone, ApiTwoTone } from '@ant-design/icons'\n\nconst { TextArea } = Input\n\nexport const reloadTasks = async(\n        dispatch, \n        pages= {totals:1, actives: 1, priorities: 1, completes: 1},\n        date_range={start_date:'', end_date:''},\n        year='',\n        month='',\n        day='',\n        id_person='',\n        id_enterprise=''\n        ) =>{\n\n    try{\n        const totals = await api.tasks.get_tasks(\n            pages.totals,\n            '',\n            {\n                start_date:date_range.start_date, \n                end_date:date_range.end_date\n            },\n            year, month, day, \n            id_person, id_enterprise\n        )\n\n        const actives = await api.tasks.get_tasks(\n            pages.actives, \n            {is_active:true}, \n            {\n                start_date:date_range.start_date, \n                end_date:date_range.end_date\n            },\n            year, month, day, \n            id_person, id_enterprise\n        )\n\n        const priorities = await api.tasks.get_tasks(\n            pages.priorities, \n            {is_priority:true}, \n            {\n                start_date:date_range.start_date, \n                end_date:date_range.end_date\n            }, \n            year, month, day, \n            id_person, id_enterprise\n        )\n\n        const completes = await api.tasks.get_tasks(\n            pages.completes, \n            {is_complete:true}, \n            {\n                start_date:date_range.start_date, \n                end_date:date_range.end_date\n            }, \n            year, month, day, \n            id_person, id_enterprise\n        )\n\n        dispatch({type:'CLEAN_RANGE_DATE'})\n\n        dispatch({\n            type:'RELOAD_ALL_DATA',\n            payload: {\n                totals:totals,\n                actives:actives,\n                priority:priorities,\n                completes:completes,\n                date_range:date_range,\n                year:year,\n                month:month,\n                day:day,\n                id_enterprise_selected:id_enterprise,\n                id_person_selected:id_person\n\n            }\n        })\n\n    }catch(error){\n        console.log({error})\n    }\n    \n}\n\nexport const updateTaskModal = async(dispatch, task, state) => {\n\n    if(task){\n        task = {\n            ...task,\n            'date':moment(task.date)\n        }\n    }\n\n    const onFinish = async(value) => {\n        \n        if(value.date){\n            value = {\n                ...value,\n                'date':moment(value.date).format('YYYY-MM-DDTHH:mm:ss')\n            }\n        }\n        \n        const update_task = await api.tasks.update_task(task.id, value)\n        \n            if(update_task.status){\n                notification.open({\n                    message: `Tarea Actualizada!`,\n                    description: `La tarea \"${task.id}\" fue actualizada`,\n                    icon: <BookFilled />\n                })\n                reloadTasks(\n                    dispatch, \n                    {\n                        totals:state.pageTotals, \n                        actives:state.pageActives, \n                        priorities:state.pagePriority, \n                        completes:state.pageCompletes\n                    }, \n                    {\n                        start_date:state.date_range.start_date, \n                        end_date:state.date_range.end_date\n                    }, \n                    state.year, state.month, state.day,\n                    state.id_person_selected,\n                    state.id_enterprise_selected\n                )      \n                Modal.destroyAll()                    \n            }                \n    }\n\n    try{\n\n        Modal.info({\n            title: `Actualizar la tarea \"${task.id}\"`,\n            width: '400px',\n            maskClosable: true,\n            content: <> \n            <Form\n                    layout=\"vertical\"\n                    name=\"update_types\"\n                    style={{marginTop:'20px'}}\n                    onFinish = {onFinish}\n                    initialValues={task}                    \n                >\n\n                    <Form.Item\n                        style={{width:'100%', marginBottom:'10px'}}\n                        name=\"note\"\n                        label=\"Nota\"\n                        rules={[\n                            {\n                              required: true,\n                              message: 'Escribe una Nota',\n                            },\n                          ]}                        \n                    >\n                        <TextArea placeholder=\"Nota...\"/>\n                    </Form.Item>\n\n                    <Form.Item name=\"date\" label=\"Fecha de ejecuciÃ³n\" rules={[{required: true,message: 'Selecciona una fecha',}]}>\n                        <DatePicker style={{width:'100%'}} showTime={{ format: 'HH:mm:ss' }} />\n                    </Form.Item>\n\n                     <Button type=\"primary\" style={{marginRight:'5px'}} htmlType=\"submit\" >Actualizar</Button>\n                     <Button type=\"danger\" onClick={() =>{Modal.destroyAll()} } >Cancelar</Button>                                       \n                </Form>\n            </>,\n            okButtonProps:{ style: { display: 'none' } },\n            \n        })\n        \n\n    }catch(error){\n        console.log(error)\n    }\n}\n\n\nexport const paginationTotals = async(dispatch, page, state)=>{\n    console.log(state)\n    try{\n\n        dispatch({ type: 'LOADING_TOTALS' })\n        const tasks_totals = await api.tasks.get_tasks(\n            page, \n            '', \n            {\n                start_date:state.date_range.start_date, \n                end_date:state.date_range.end_date\n            }, \n            state.year, state.month, state.day,\n            state.id_person_selected,\n            state.id_enterprise_selected\n        )\n\n        dispatch({\n            type:'PAGINATION_TOTALS',\n            payload: tasks_totals,\n            page: page\n        })\n\n    }catch(error){\n        console.log({error})\n    }\n}\n\nexport const paginationActives = async(dispatch, page, state) =>{\n    try {\n        dispatch({type: 'LOADING_ACTIVES'})\n        const tasks_actives = await api.tasks.get_tasks(\n            page, \n            {is_active:true}, \n            {\n                start_date:state.date_range.start_date, \n                end_date:state.date_range.end_date\n            }, \n            state.year, state.month, state.day,\n            state.id_person_selected,\n            state.id_enterprise_selected\n            \n        )\n\n        dispatch({\n            type:'PAGINATION_ACTIVES',\n            payload: tasks_actives,\n            page: page\n        })\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const paginationPriorities = async(dispatch, page, state) =>{\n    try{\n        dispatch({type:'LOADING_PRIORITIES'})\n        const tasks_priorities = await api.tasks.get_tasks(\n            page, \n            {is_priority:true}, \n            {\n                start_date:state.date_range.start_date, \n                end_date:state.date_range.end_date\n            }, \n            state.year, state.month, state.day,\n            state.id_person_selected,\n            state.id_enterprise_selected    \n        )\n\n        dispatch({\n            type:'PAGINATION_PRIORITIES',\n            payload: tasks_priorities,\n            page: page\n        })\n    }catch(error){\n        const tasks_priorities = await api.tasks.get_tasks(1, {is_priority:true}, {start_date:state.date_range.start_date, end_date:state.date_range.end_date}, state.year, state.month, state.day)\n        dispatch({\n            type:'PAGINATION_PRIORITIES',\n            payload: tasks_priorities,\n            page: 1\n        })\n    }\n}\n\nexport const paginationCompletes = async(dispatch, page, state)=>{\n    try{\n        dispatch({type:'LOADING_COMPLETES'})\n        const tasks_completes = await api.tasks.get_tasks(\n            page, \n            {is_complete:true}, \n            {\n                start_date:state.date_range.start_date, \n                end_date:state.date_range.end_date\n            }, \n            state.year, state.month, state.day,\n            state.id_person_selected,\n            state.id_enterprise_selected\n        )\n\n        dispatch({\n            type:'PAGINATION_COMPLETES',\n            payload: tasks_completes,\n            page: page\n        })\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const deleteTask = (id_task, state, dispatch) => {\n    Modal.confirm({\n        title:`Eliminar tarea #${id_task}`,\n        icon: <DeleteOutlined style={{ color: 'red'}}/>,\n        content: `Estas seguro de liminar la tarea #${id_task}, una vez eliminada no podrÃ¡s recuperar este registro`,\n        okText: 'ELIMINAR',\n        okType: 'danger',\n        cancelType: 'danger',\n        width: '600px',\n        onOk: async() =>{\n                const data = await api.tasks.delete_task(id_task)\n                if(data.status){\n                    notification.open({\n                        message: `Tarea Eliminada!`,\n                        description: `La tarea #${id_task} fue eliminada`,\n                        icon: <DeleteOutlined style={{ color: '#red'}} />\n                    })                    \n                }\n                reloadTasks(dispatch, {totals:state.pageTotals, actives:state.pageActives, priorities:state.pagePriority, completes:state.pageCompletes}, {start_date:state.date_range.start_date, end_date:state.date_range.end_date}, state.year, state.month, state.day)\n        }         \n    })\n\n}\n\nexport const finishTask = (dispatch, id_task, state) =>{\n    \n    Modal.confirm({\n        title:'PrecauciÃ³n',\n        icon: <WarningOutlined/>,\n        content: `Estas seguro de querer completar la tarea #${id_task}, una vez completada una tarea no podrÃ¡s re abrirla, editarla o eliminarla.`,\n        okText: 'COMPLETAR',\n        width: '600px',\n        onOk: async() =>{\n                const data = await api.tasks.finish_task(id_task)\n                if(data.status){\n                    notification.open({\n                        message: `Tarea Completada!`,\n                        description: `La tarea #${id_task} fue completada`,\n                        icon: <SmileOutlined style={{ color: '#108ee9'}} />\n                    })\n                    reloadTasks(dispatch, {totals:state.pageTotals, actives:state.pageActives, priorities:state.pagePriority, completes:state.pageCompletes}, {start_date:state.date_range.start_date, end_date:state.date_range.end_date}, state.year, state.month, state.day)            \n                }\n        }         \n    })\n} \n\nexport const updateTaks = async(id_task, dispatch, state, data) =>{\n    try{\n        const task = await api.tasks.update_task(id_task, data)\n        if(task.status){\n            notification.open({\n                message: 'Tarea Actualizada!',\n                description: `La tarea #${id_task} fue actualizada`,\n                icon: <CheckCircleFilled />\n            })\n        }\n        reloadTasks(\n            dispatch, \n            {\n                totals:state.pageTotals, \n                actives:state.pageActives, \n                priorities:state.pagePriority, \n                completes:state.pageCompletes\n            }, \n            {\n                start_date:state.date_range.start_date, \n                end_date:state.date_range.end_date\n            }, \n            state.year, state.month, state.day,\n            state.id_person_selected,\n            state.id_enterprise_selected\n        )\n\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const viewTask = (task) => {\n    Modal.info({\n        title:<>\n            {task.type_action} | {task.employee.name}({task.employee.enterprise})\n            </>,\n        icon: <BookFilled style={{ color: '#1890ff'}}/>,\n        content: <>\n            <Descriptions title={`Tarea #${task.id} - ${task.user}`} layout=\"vertical\" bordered>\n                <Descriptions.Item label=\"Tipo de tarea\">\n                    {task.type_action}\n                </Descriptions.Item>\n                \n                <Descriptions.Item label=\"Fecha de creaciÃ³n\" >\n                    <Tag color=\"blue\">{task.created.slice(0,10)}</Tag> \n                    <Tag color=\"blue\">{task.created.slice(11,19)} hrs</Tag>\n                </Descriptions.Item>\n\n                <Descriptions.Item label=\"Fecha de ejecuciÃ³n\" >\n                <Tag color=\"magenta\">{task.date.slice(0,10)}</Tag> \n                    <Tag color=\"magenta\">{task.date.slice(11,19)} hrs</Tag>\n                </Descriptions.Item>\n\n                <Descriptions.Item label=\"Nota\" span={3}>                    \n                    {task.note}\n                </Descriptions.Item>\n\n                <Descriptions.Item style={{textAlign:'center'}} label=\"ACTIVA\">\n                    {task.is_active ? <CheckCircleTwoTone twoToneColor=\"#87d068\" style={{fontSize:'20px'}}/> : <MinusCircleTwoTone twoToneColor=\"red\" style={{fontSize:'20px'}}/>}\n                </Descriptions.Item>\n\n                <Descriptions.Item style={{textAlign:'center'}} label=\"PRIORIDAD\">\n                    {task.is_priority ? <CheckCircleTwoTone twoToneColor=\"#87d068\" style={{fontSize:'20px'}}/> : <MinusCircleTwoTone twoToneColor=\"red\" style={{fontSize:'20px'}}/>}\n                </Descriptions.Item>\n\n                <Descriptions.Item style={{textAlign:'center'}} label=\"COMLPETADA\">\n                    {task.is_complete ? <CheckCircleTwoTone twoToneColor=\"#87d068\" style={{fontSize:'20px'}}/> : <MinusCircleTwoTone twoToneColor=\"red\" style={{fontSize:'20px'}}/>}\n                </Descriptions.Item>\n            </Descriptions>\n            \n            <Descriptions title={`${task.employee.name}`} bordered style={{marginTop:'20px'}}>\n                <Descriptions.Item label=\"Empresa\" span={3}>\n                    {task.employee.enterprise}\n                </Descriptions.Item>\n            \n                <Descriptions.Item label=\"Cargo\" span={3}>\n                    {task.employee.charge}\n                </Descriptions.Item>\n            \n                <Descriptions.Item label=\"Email\" span={3}>\n                    {task.employee.email}\n                </Descriptions.Item>\n            \n                <Descriptions.Item label=\"Telefono\" span={3}>\n                    {task.employee.phone_number}\n                </Descriptions.Item>\n            </Descriptions>\n        </>,\n        okText: 'OK',\n        width: '900px'      \n    })\n\n}\n\nexport const getTypeTasks = async(dispatch, page) =>{\n    try{\n        dispatch({type:'LOADING_TYPES'})\n\n        const type_tasks = await api.type_tasks.get_type_actions(page)\n\n        dispatch({\n            type: 'GET_TYPE_TASKS',\n            payload: type_tasks,\n            page:page\n        })\n\n    }catch(error){\n        console.log({error})\n    }\n}\n\nexport const postTypeTasks = async(dispatch, data) =>{\n    \n    try{                \n\n        const type_task = await api.type_tasks.create_type_task(data)\n        if(type_task.status){\n            getTypeTasks(dispatch, 1)\n        }                \n\n    }catch(error){\n        console.log({error})\n    }\n}\n\nexport const deleteTypeTask = async(dispatch, id_type, state) =>{\n    console.log(state)\n    Modal.confirm({\n        title:`Eliminar tipo de tarea \"${id_type.description}\"`,\n        icon: <DeleteOutlined style={{ color: 'red'}}/>,\n        content: `Estas seguro de eliminar el tipo de tarea #${id_type.id}, una vez eliminada no podrÃ¡s recuperar este registro`,\n        okText: 'ELIMINAR',\n        okType: 'danger',\n        cancelType: 'danger',\n        width: '600px',\n        onOk: async() =>{                \n                const data = await api.type_tasks.delete_type_task(id_type.id)\n                if(data.status){\n                    notification.open({\n                        message: `Tipo de tarea Eliminada!`,\n                        description: `El tipo de tarea ${id_type.description} fue eliminada`,\n                        icon: <DeleteOutlined style={{ color: '#red'}} />\n                    })                    \n                }\n                getTypeTasks(dispatch,state.page )\n        }    \n    })\n}\n\nexport const updateTypeTask = async(dispatch, type_task, state) => {\n\n    const onFinish = async(value) => {\n        \n        const update_task = await api.type_tasks.update_type_task(value.id, value)\n        \n            if(update_task.status){\n                notification.open({\n                    message: `Tipo de tarea Actualizada!`,\n                    description: `El tipo de tarea \"${value.description}\" fue actualizada`,\n                    icon: <ApiTwoTone style={{ color: '#red'}} />\n                })\n                getTypeTasks(dispatch,state.page)            \n                Modal.destroyAll()                    \n            }                \n    }\n\n    try{\n\n        Modal.info({\n            title: `Actualizar \"${type_task.description}\"`,\n            width: '700px',\n            maskClosable: true,\n            content: <> \n            <Form\n                    layout=\"inline\"\n                    name=\"update_types\"\n                    style={{marginTop:'20px'}}\n                    onFinish = {onFinish}\n                    initialValues={type_task}                    \n                >\n                    <Form.Item\n                        style={{width:'60%', marginBottom:'10px'}}\n                        name=\"id\"                     \n                    >   \n                        <Input hidden={true} />\n                    </Form.Item>\n\n                    <Form.Item\n                        style={{width:'60%', marginBottom:'10px'}}\n                        name=\"description\"\n                        rules={[\n                            {\n                              required: true,\n                              message: 'Escribe el nuevo tipo de tarea',\n                            },\n                          ]}                        \n                    >\n                        <Input placeholder=\"DescripciÃ³n\"/>\n                    </Form.Item>\n\n                     <Button type=\"primary\" style={{marginRight:'5px'}} htmlType=\"submit\" >Actualizar</Button>\n                     <Button type=\"danger\" onClick={() =>{Modal.destroyAll()} } >Cancelar</Button>                                       \n                </Form>\n            </>,\n            okButtonProps:{ style: { display: 'none' } },\n            \n        })\n        \n\n    }catch(error){\n        console.log(error)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}