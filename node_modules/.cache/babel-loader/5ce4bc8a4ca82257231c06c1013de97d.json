{"ast":null,"code":"var _jsxFileName = \"/Users/felipebarraza/Desktop/ui_crm/src/components/tasks/FormTask.js\";\nimport React, { useState } from 'react';\nimport { Button, Modal, Tooltip, Form, Input, DatePicker, Select, notification, Checkbox } from 'antd';\nimport { BookTwoTone } from '@ant-design/icons';\nimport { PlusCircleTwoTone } from '@ant-design/icons';\nimport api from '../../api/endpoints';\nimport moment from 'moment'; //Actions\n\nimport { reloadTasks } from '../../actions/tasks';\nconst {\n  TextArea\n} = Input;\nconst {\n  Option\n} = Select;\n\nconst FormTask = ({\n  dispatch\n}) => {\n  const [modalForm, setModalForm] = useState({\n    visible: false\n  });\n  const [formTask, setFormTask] = useState({\n    type_actions: null,\n    enterprises: null,\n    persons: null\n  });\n\n  const getTypeTask = async value => {\n    const type_actions = await api.type_tasks.search_type_task(value);\n    setFormTask({ ...formTask,\n      type_actions: type_actions.data.results,\n      status_person: true\n    });\n  };\n\n  const getEnterprises = async value => {\n    const enterprises = await api.enterprises.search_enterprise(value);\n    setFormTask({ ...formTask,\n      enterprises: enterprises.data.results\n    });\n  };\n\n  const getPersons = async id_enterprise => {\n    const persons = await api.enterprises.get_retrive_enterprise(id_enterprise);\n    setFormTask({ ...formTask,\n      persons: persons.data.employess\n    });\n  };\n\n  const createTask = async values => {\n    values = { ...values,\n      'date': moment(values.date)\n    };\n\n    if (values.is_complete) {\n      values = { ...values,\n        'date_complete': moment(values.date),\n        'is_active': false,\n        'is_priority': false\n      };\n    }\n\n    const task = await api.tasks.create_task(values);\n\n    if (task.status) {\n      form.resetFields();\n      reloadTasks(dispatch, {\n        totals: 1,\n        actives: 1,\n        priorities: 1,\n        completes: 1\n      });\n      setModalForm({ ...modalForm,\n        visible: false\n      });\n      notification.open({\n        message: 'Tarea Creada!',\n        description: `Nueva tarea creada`,\n        icon: /*#__PURE__*/React.createElement(BookTwoTone, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 23\n          }\n        })\n      });\n    }\n\n    setFormTask({\n      type_actions: null,\n      enterprises: null,\n      persons: null\n    });\n  };\n\n  const [form] = Form.useForm();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    visible: modalForm.visible,\n    title: \"NUEVA TAREA\",\n    okText: \"Crear Tarea\",\n    cancelText: \"Cancelar\",\n    onCancel: () => setModalForm({ ...modalForm,\n      visible: false\n    }),\n    width: '400px',\n    onOk: () => {\n      form.validateFields().then(values => {\n        createTask(values);\n      }).catch(info => {\n        console.log('Validate Failed:', info);\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    name: \"form_task\",\n    layout: \"vertical\",\n    style: {\n      marginBottom: '20px'\n    },\n    onFinish: values => console.log(values),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"type_action\",\n    label: \"Tipo de Tarea\",\n    rules: [{\n      required: true,\n      message: 'Escribe el nuevo tipo de tarea'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    showSearch: true,\n    placeholder: \"Busca un tipo de tarea\",\n    optionFilterProp: \"children\",\n    notFoundContent: 'No se encuentra',\n    onSearch: value => {\n      getTypeTask(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, formTask.type_actions && formTask.type_actions.map((option, index) => /*#__PURE__*/React.createElement(Option, {\n    key: index,\n    value: option.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 29\n    }\n  }, option.description)))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"client\",\n    label: \"Empresa\",\n    rules: [{\n      required: true,\n      message: 'Selecciona una empresa'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    showSearch: true,\n    placeholder: \"Busca una empresa\",\n    optionFilterProp: \"children\",\n    notFoundContent: 'No se encuentra',\n    onSearch: value => {\n      getEnterprises(value);\n    },\n    onSelect: value => {\n      getPersons(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 25\n    }\n  }, formTask.enterprises && formTask.enterprises.map((option, index) => /*#__PURE__*/React.createElement(Option, {\n    key: index,\n    value: option.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 37\n    }\n  }, option.name)))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"employee\",\n    label: \"Persona\",\n    rules: [{\n      required: true,\n      message: 'Debes seleccionar una persona'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    placeholder: \"Selecciona una persona\",\n    optionFilterProp: \"children\",\n    notFoundContent: 'Selecciona una empresa',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 25\n    }\n  }, formTask.persons && formTask.persons.map((option, index) => /*#__PURE__*/React.createElement(Option, {\n    key: index,\n    value: option.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 37\n    }\n  }, option.name)))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"date\",\n    label: \"Fecha de ejecuci\\xF3n\",\n    rules: [{\n      required: true,\n      message: 'Selecciona una fecha'\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    style: {\n      width: '100%'\n    },\n    showTime: {\n      format: 'HH:mm:ss'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"is_complete\",\n    valuePropName: \"checked\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }, \"ACCION COMERCIAL\")), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"note\",\n    label: \"Nota\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    rows: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Nueva tarea\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: () => setModalForm({ ...modalForm,\n      visible: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PlusCircleTwoTone, {\n    style: {\n      fontSize: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }))));\n};\n\nexport default FormTask;","map":{"version":3,"sources":["/Users/felipebarraza/Desktop/ui_crm/src/components/tasks/FormTask.js"],"names":["React","useState","Button","Modal","Tooltip","Form","Input","DatePicker","Select","notification","Checkbox","BookTwoTone","PlusCircleTwoTone","api","moment","reloadTasks","TextArea","Option","FormTask","dispatch","modalForm","setModalForm","visible","formTask","setFormTask","type_actions","enterprises","persons","getTypeTask","value","type_tasks","search_type_task","data","results","status_person","getEnterprises","search_enterprise","getPersons","id_enterprise","get_retrive_enterprise","employess","createTask","values","date","is_complete","task","tasks","create_task","status","form","resetFields","totals","actives","priorities","completes","open","message","description","icon","useForm","validateFields","then","catch","info","console","log","marginBottom","required","map","option","index","id","name","width","format","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport {  Button, Modal, Tooltip, Form, Input, \n        DatePicker, Select, notification, Checkbox } from 'antd'\nimport { BookTwoTone } from '@ant-design/icons'\n\nimport { PlusCircleTwoTone } from '@ant-design/icons'\n\nimport api from '../../api/endpoints'\n\nimport moment from 'moment'\n\n//Actions\nimport { reloadTasks } from '../../actions/tasks'\n\nconst { TextArea } = Input\nconst { Option } = Select\n\nconst FormTask = ({ dispatch })=>{\n\n    const [modalForm, setModalForm] = useState({\n        visible: false\n    })\n\n    const [formTask, setFormTask] = useState({\n        type_actions:null,\n        enterprises:null,\n        persons:null\n    })\n\n    const getTypeTask = async(value)=>{\n\n        const type_actions =  await api.type_tasks.search_type_task(value)        \n        setFormTask({\n            ...formTask, \n            type_actions:type_actions.data.results,\n            status_person:true\n        })\n    }\n\n    const getEnterprises = async(value) =>{\n        const enterprises = await api.enterprises.search_enterprise(value)\n        setFormTask({\n            ...formTask,\n            enterprises:enterprises.data.results\n        })\n    }\n\n    const getPersons = async(id_enterprise) =>{\n        const persons = await api.enterprises.get_retrive_enterprise(id_enterprise)        \n        setFormTask({\n            ...formTask,\n            persons:persons.data.employess\n        })\n    }\n\n    const createTask = async(values) =>{\n        \n        values = {\n            ...values,\n            'date':moment(values.date)\n        }\n        if(values.is_complete){\n            values = {\n                ...values,\n                'date_complete':moment(values.date),\n                'is_active':false,\n                'is_priority':false\n            }\n        }\n        \n\n        const task = await api.tasks.create_task(values)\n\n        if(task.status){\n            \n            form.resetFields()\n            \n            reloadTasks(dispatch, {totals:1, actives:1, priorities:1, completes:1})    \n            \n            setModalForm({\n                ...modalForm,\n                visible:false\n            })\n\n            notification.open({\n                message: 'Tarea Creada!',\n                description: `Nueva tarea creada`,\n                icon: <BookTwoTone />\n            })\n\n        }        \n\n        setFormTask({\n            type_actions:null,\n            enterprises:null,\n            persons:null\n        })\n\n    }\n\n    const [form] = Form.useForm()\n\n\n    return (\n        <React.Fragment>\n            <Modal\n                visible={modalForm.visible}\n                title=\"NUEVA TAREA\"\n                okText=\"Crear Tarea\"\n                cancelText=\"Cancelar\"\n                onCancel={()=> setModalForm({...modalForm, visible:false})}\n                width={'400px'}\n                onOk={() => {\n                    form\n                      .validateFields()\n                      .then(values => {\n                        createTask(values)\n                      })\n                      .catch(info => {\n                        console.log('Validate Failed:', info)\n                      })\n                  }}\n            >\n                <Form\n                    form={form}\n                    name=\"form_task\"\n                    layout=\"vertical\"\n                    style={{marginBottom:'20px'}}\n                    onFinish = {(values)=>console.log(values)}\n                >   \n                    <Form.Item name=\"type_action\" label=\"Tipo de Tarea\" rules={[{required: true,message: 'Escribe el nuevo tipo de tarea',}]}>\n                        <Select \n                            showSearch\n                            placeholder=\"Busca un tipo de tarea\"\n                            optionFilterProp=\"children\"\n                            notFoundContent={'No se encuentra'}\n                            onSearch={(value)=>{\n\n                                getTypeTask(value)\n                            }} \n                        >\n                            {formTask.type_actions &&\n                            formTask.type_actions.map((option, index)=> (\n                            <Option key={index} value={option.id}>{option.description}</Option>\n                            )\n\n                    )}\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item name=\"client\" label=\"Empresa\" rules={[{required: true,message: 'Selecciona una empresa',}]}>\n                        <Select\n                            showSearch\n                            placeholder=\"Busca una empresa\"\n                            optionFilterProp=\"children\"\n                            notFoundContent={'No se encuentra'} \n                            onSearch={(value)=>{\n\n                                getEnterprises(value)\n                            }} \n                            onSelect={(value)=>{\n                                getPersons(value)\n                            }}\n                            \n                        >\n                            {formTask.enterprises &&\n                            formTask.enterprises.map((option, index)=> (\n                                    <Option key={index} value={option.id}>{option.name}</Option>\n                                )\n                            )}\n\n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item name=\"employee\" label=\"Persona\" rules={[{required: true,message: 'Debes seleccionar una persona',}]}>\n                        <Select                     \n                            placeholder=\"Selecciona una persona\"\n                            optionFilterProp=\"children\"\n                            notFoundContent={'Selecciona una empresa'} \n                            \n                        >\n                            {formTask.persons &&\n                            formTask.persons.map((option, index)=> (\n                                    <Option key={index} value={option.id}>{option.name}</Option>\n                                )\n                            )}  \n                        </Select>\n                    </Form.Item>\n\n                    <Form.Item name=\"date\" label=\"Fecha de ejecución\" rules={[{required: true,message: 'Selecciona una fecha',}]}>\n                        <DatePicker style={{width:'100%'}} showTime={{ format: 'HH:mm:ss' }} />\n                    </Form.Item>\n                    \n                    <Form.Item name=\"is_complete\" valuePropName=\"checked\">\n                        <Checkbox>ACCION COMERCIAL</Checkbox>\n                    </Form.Item>\n                    \n\n                    <Form.Item name=\"note\" label=\"Nota\">\n                        <TextArea rows={4} />\n                    </Form.Item>                    \n                </Form>\n\n            </Modal>\n            <Tooltip  title=\"Nueva tarea\">\n            <Button type=\"link\" onClick={() => setModalForm({...modalForm, visible:true})}>\n                <PlusCircleTwoTone style={{fontSize:'30px'}} />\n            </Button>\n            </Tooltip>\n        </React.Fragment>\n    )\n\n}\n\nexport default FormTask"]},"metadata":{},"sourceType":"module"}